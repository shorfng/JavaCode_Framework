<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/data/jpa
        https://www.springframework.org/schema/data/jpa/spring-jpa.xsd
">
    <!-- 对Spring和SpringDataJPA进行配置 -->

    <!--1、创建数据库连接池druid-->
    <!-- 引入外部资源文件 -->
    <context:property-placeholder location="classpath:jdbc.properties"/>

    <!-- 第三方jar中的bean定义在xml中 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>

    <!-- 2、配置 entityManagerFactory -->
    <!-- entityManager 类似于 mybatis中的SqlSession -->
    <!-- entityManagerFactory 类似于 Mybatis中的SqlSessionFactory -->
    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <!--配置一些细节.......-->

        <!-- 配置数据源-->
        <property name="dataSource" ref="dataSource"/>

        <!-- 配置包扫描（pojo实体类所在的包）-->
        <property name="packagesToScan" value="com.loto.jpa.pojo"/>

        <!-- 指定jpa的具体实现，也就是hibernate -->
        <property name="persistenceProvider">
            <bean class="org.hibernate.jpa.HibernatePersistenceProvider"/>
        </property>

        <!-- jpa方言配置 -->
        <!-- 不同的jpa实现细节不一样，所以需要传入JpaDialect具体的实现类 -->
        <property name="jpaDialect">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaDialect"/>
        </property>

        <!-- 配置具体provider，hibernate 框架的执行细节 -->
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
                <!-- 定义hibernate框架的一些细节 -->

                <!-- 配置数据表是否自动创建（建立pojo和数据表之间的映射关系） -->
                <property name="generateDdl" value="false"/>

                <!-- 指定数据库的类型（hibernate本身是个dao层框架，可以支持多种数据库类型） -->
                <property name="database" value="MYSQL"/>

                <!-- 配置数据库的方言（据库sql语法是不同的，所以需要注入具体的数据库方言） -->
                <property name="databasePlatform" value="org.hibernate.dialect.MySQLDialect"/>

                <!-- 是否显示sql（操作数据库时，是否打印sql）-->
                <property name="showSql" value="true"/>
            </bean>
        </property>
    </bean>

    <!-- 3、<jpa:repositories> 配置jpa的dao层细节，引用上面创建的 entityManagerFactory  -->
    <!-- base-package:指定dao层接口所在包 -->
    <jpa:repositories base-package="com.loto.jpa.dao" entity-manager-factory-ref="entityManagerFactory" transaction-manager-ref="transactionManager"/>

    <!-- 4、事务管理器配置 -->
    <!-- jdbcTemplate/mybatis 使用的是 DataSourceTransactionManager -->
    <!-- jpa使用的是：JpaTransactionManager -->
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory"/>
    </bean>

    <!-- 5、声明式事务配置 -->
    <!--<tx:annotation-driven/>-->

    <!-- 6、配置spring包扫描 -->
    <context:component-scan base-package="com.loto.jpa"/>
</beans> 
